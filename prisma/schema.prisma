generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}



model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id                      String       @id @default(cuid())
    sessionToken            String       @unique
    userId                  String
    expires                 DateTime
    user                    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier              String
    token                   String       @unique
    expires                 DateTime

    @@unique([identifier, token])
}

model User {
    id                  String          @id @default(cuid())
    firstname           String?
    surname             String?
    login               String?
    email               String?         @unique
    emailVerified       DateTime?
    image               String?
    accounts            Account[]
    sessions            Session[]
    role                Role            @default(USER)
    
    //пилот 1 к 1 
    pilotid            String?        @unique
    pilot              Pilot?         @relation(fields: [pilotid], references: [id])

    //судья 1 к 1
    judgeid            String?        @unique
    judge              Judge?         @relation(fields: [judgeid], references: [id])

}

enum Role {
  USER
  PILOT
  JUDGE
  ADMIN
}

model Pilot {
  id                    String      @id @default(cuid())
  birthDate             DateTime
  license               String?
  start_number          Int

  user                  User?

  results               Result[]
  penalties             Penalty[]   //один пилот может иметь несколько штрафов
}


model Judge {
  id                    String      @id @default(cuid())

  //1 к 1 
  user                  User?
  penalties             Penalty[]  //судья может выдать много штрафов
}


model Season {
  id                    String          @id @default(cuid())
  year                  Int
  isActive              Boolean         @default(false)

  // 1 к многим
  weekend               Weekend[]

}

model Weekend {
  id                    String          @id @default(cuid())
  stage                 Int
  nameTrassa            String
  city                  String

  dateStart             DateTime
  dateEnd               DateTime

  seasonId              String
  season                Season          @relation(fields: [seasonId], references: [id])


}

model Event {
  id                    String          @id @default(cuid())
  type                  RaceType
  data                  DateTime
  results               Result[]
  penalties             Penalty[]     //у события могут быть штрафы
}

enum RaceType {
  TEST_RACE
  QUALIFICATION
  RACE
}


model Result {
  id                    String      @id @default(cuid())
  pilotId               String      @unique
  driver                Pilot       @relation(fields: [pilotId], references: [id])

  eventId               String      @unique
  event                 Event       @relation(fields: [eventId], references: [id])

  position              Int
  points                Int
  bestLap               Float?

}




model Penalty {
  id          String   @id @default(cuid())
  reason      String   // причина штрафа
  points      Int?     // штрафные очки (если снимаются)
  time        Int?     // штраф в секундах (если применяется ко времени)
  disqualified Boolean @default(false) // дисквалификация


  // связи
  pilotId     String
  pilot       Pilot    @relation(fields: [pilotId], references: [id])

  judgeId     String
  judge       Judge    @relation(fields: [judgeId], references: [id])

  eventId     String
  event       Event    @relation(fields: [eventId], references: [id])

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}








